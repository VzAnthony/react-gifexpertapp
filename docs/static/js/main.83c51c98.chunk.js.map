{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","ev","preventDefault","trim","length","actualValue","type","value","onChange","target","getGifs","category","a","url","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACE,sBAAMC,SARa,SAACC,GACpBA,EAAGC,iBACCJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAW,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,MAIhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAhBoB,SAACP,GACzBF,EAAcE,EAAGQ,OAAOF,a,+BCPfG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,0FAC0EF,EAD1E,sBAEEG,MAAMD,GAFR,cAEfE,EAFe,gBAGEA,EAASC,OAHX,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QATjB,kBAadK,GAbc,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IACtC,OACE,sBAAKa,UAAU,yCAAf,UACE,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAExB,ECH0B,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCoB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACRvB,EAAQC,GACLuB,MAAK,SAAAjB,GAAI,OAAIe,EAAS,CACrBf,OACAa,SAAS,SAGZ,CAACnB,IAGGoB,EDb2BI,CAAaxB,GAAvCmB,EAAR,EAAQA,QAAgBP,EAAxB,EAAkBN,KAElB,OACE,qCACE,oBAAIS,UAAU,oCAAd,SAAmDf,IAC/C,sBAAKe,UAAU,YAAf,UACCI,GAAW,mBAAGJ,UAAU,mCAAb,yBAERH,EAAOJ,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,eAEMA,GADCA,EAAIC,cEZde,EAAe,WAE1B,MAAoCvC,mBAAS,CAAC,UAA9C,mBAAOwC,EAAP,KAAmBzC,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACGyC,EAAWlB,KAAI,SAAAR,GAAQ,OACtB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCVxB2B,IAASC,OACL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.83c51c98.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('')\r\n\r\n  const handleInputChange = (ev) => {\r\n    setInputValue(ev.target.value)\r\n  }\r\n\r\n  const handleSubmit = (ev) => {\r\n    ev.preventDefault()\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories(actualValue => [inputValue, ...actualValue])\r\n      setInputValue('')\r\n    }\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async(category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=u2xqVHTqlaJsZXNyGwJWBH7CXqsn6Qol&q=${category}&limit=10`\r\n  const response = await fetch(url)\r\n  const { data } = await response.json()\r\n\r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  })\r\n\r\n  return gifs\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n  return (\r\n    <div className='card animate__animated animate__fadeIn'>\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const { loading , data: images} = useFetchGifs(category);  \r\n  \r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n          <div className='card-grid'>\r\n          {loading && <p className='animate__animated animate__flash'>Cargando...</p>}\r\n            {\r\n              images.map((img) =>\r\n                <GifGridItem\r\n                  key={img.id}\r\n                  {...img}\r\n                />\r\n              )\r\n            }\r\n          </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n\r\n  useEffect(() => {\r\n    getGifs(category)\r\n      .then(data => setState({\r\n        data,\r\n        loading: false\r\n        })\r\n      )\r\n  }, [category]);\r\n\r\n\r\n  return state;\r\n}","import {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['Tobey']);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map(category => \r\n          <GifGrid key={category} category={category} />\r\n        )}\r\n      </ol>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}